<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="./ant2html.xsl"?>
<project name="icsDeploy" default="deploy" basedir=".">
    <!-- Perform any initialization that is needed, such as reading property files and setting up timestamps  -->
    <target name="init">
        <property name="unix.home" value="/rhome/${userid}"/>
    </target>

    <target name="deploy" unless="local_deploy" depends="init">
        <copy todir="${dev_application_home.dir}" file="${bundle_dev.dir}\${harvest_project}.ear"/>

        <!-- Copy the deploy script to a temporary location.  This is
            so that it can be edited then deleted.  Prevents CVS commit issues
        -->
        <copy file="hardeploy.ksh" tofile="hardeploy_temp.ksh" overwrite="true"/>
        <!-- Replace the userid token with the current user id, this will enable the
            Harvest process to run under the curertly executing user id
        -->
        <replace file="hardeploy_temp.ksh" token="@@USER_ID@@" value="${userid}"/>
        <replace file="hardeploy_temp.ksh" token="@@HARVEST_PROJECT@@" value="${harvest_project}"/>
        <replace file="hardeploy_temp.ksh" token="@@HARVEST_STATE@@" value="dev"/>
        <replace file="hardeploy_temp.ksh" token="@@NOTIFY_ADDR@@" value="${buildmaster_list}"/>

        <antcall target="deployHarvestUnix"/>
        <antcall target="deployHarvestWindows"/>
    </target>

    <!-- Call the Harvest deployment script to move the EAR -->
    <target name="deployHarvestUnix" if="unixBuild" depends="init">
        <chmod file="hardeploy_temp.ksh" perm="774"/>
        <!-- Execute a script that runs the harrefreshc command -->
        <exec executable="${basedir}/runHarvestUDP.ksh" output="harrefreshc.log"/>
        <!-- Remove the temporary file -->
        <delete file="hardeploy_temp.ksh"/>
    </target>

    <target name="deployHarvestWindows" if="windowsBuild" depends="init">
        <!-- Make sure the line endings are appropriate before we move them to Unix -->
        <fixcrlf srcdir="${basedir}" eol="lf" eof="remove"
            includes="hardeploy_temp.ksh, runHarvestUDP.ksh"/>

        <!-- If we have problems with the HP server, we won't fail the entire build,
             since we can still do a manual deploy. Instead we'll notify the buildmasters -->
        <trycatch property="fail.reason">
        <try>
            <!-- Move the command files to the Dev server -->
            <ftp server="hxdapa06.amfam.com"
                remotedir="${unix.home}"
                userid="${userid}" password="${password}">
                <fileset dir="${basedir}">
                    <include name="hardeploy_temp.ksh"/>
                    <include name="runHarvestUDP.ksh"/>
                </fileset>
            </ftp>

            <!-- Run the Harvest Perl script -->
            <telnet server="hxdapa06.amfam.com" timeout="30"
                userid="${userid}" password="${password}">
                <read>${unix.home}</read>
                <write>./runHarvestUDP.ksh</write>
                <read timeout="300">${unix.home}</read>
                <write>exit</write>
            </telnet>
        </try>
        <catch>
            <mail subject="ICS deploy failed from build script" from="${buildmaster_list}" tolist="${buildmaster_list}" mailhost="mymail.amfam.com">
                <message>Build label: ${cvs_label}${line.separator}Failure message: ${fail.reason}</message>
            </mail>
        </catch>
        </trycatch>
    </target>

    <target name="syncHarvest" depends="init" unless="doNotSyncHarvest">
        <if>
            <equals arg1="${harvest_sync_from_stream}" arg2="true"/>
            <then>
                <property name="cvs_tag_arg" value="--cvsdate='${TSTAMP_FORMATED}'"/>
            </then>
            <else>
                <property file="${cvs_label_properties}"/>
                <property name="cvs_tag_arg" value="--cvstag=${cvs_label}"/>
            </else>
        </if>

        <property file="${basedir}/${harvest_project}_harvest_package.properties"/>

        <antcall target="syncHarvestUnix"/>
        <antcall target="syncHarvestWindows"/>
    </target>

    <target name="syncHarvestWindows" if="windowsBuild" unless="doNotSyncHarvest" depends="init">
        <!-- Set up a command file to avoid line-length constraints of the telnet task -->
        <copy file="har_sync_wrapper.ksh" tofile="har_sync_wrapper_temp.ksh"/>
        <property name="remoteBuildDir" value="/opt/web/ebill/build/${harvest_project}"/>
        <property name="remoteWebJarDir" value="${remoteBuildDir}/webjars"/>
        <property name="remoteScriptDir" value="${remoteBuildDir}"/>
        <property name="remoteEarJarDir" value="${remoteBuildDir}/earjars"/>

        <replace file="har_sync_wrapper_temp.ksh" token="@@USER_ID@@" value="${cvs_userid}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@PASSWORD@@" value="${cvs_password}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@HARVEST_PACKAGE@@" value="${harvest_package}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@HARVEST_STATE@@" value="${ebill.harvest_state}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@HARVEST_REPOSITORY@@" value="${harvest_repository}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@HARVEST_PROJECT@@" value="${harvest_project}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@WEB_JAR_DIR@@" value="${remoteWebJarDir}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@EAR_JAR_DIR@@" value="${remoteEarJarDir}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@CVS_TAG_ARG@@" value="${cvs_tag_arg}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@NOTIFY_ADDR@@" value="${buildmaster_email_addr}"/>
        <replace file="har_sync_wrapper_temp.ksh" token="@@PROJECT_LIST@@" value="${project_list}"/>

        <fixcrlf srcdir="${basedir}" eol="lf" eof="remove"
            includes="har_sync_wrapper_temp.ksh, harvest_to_cvs_sync.pl"/>

        <!-- Move the pre-built JARs to the Dev server, after removing any old ones there -->
        <telnet server="hxdapa06.amfam.com" timeout="30"
            userid="${userid}" password="${password}">
            <read>${unix.home}</read>
            <write>mkdir ${remoteBuildDir}</write>

            <read>${unix.home}</read>
            <write>rm -rf ${remoteWebJarDir}</write>

            <read>${unix.home}</read>
            <write>rm -rf ${remoteEarJarDir}</write>

            <read>${unix.home}</read>
            <write>mkdir ${remoteWebJarDir}</write>

            <read>${unix.home}</read>
            <write>mkdir ${remoteEarJarDir}</write>

            <read>${unix.home}</read>
            <write>exit</write>
        </telnet>

        <ftp server="hxdapa06.amfam.com"
            remotedir="${remoteWebJarDir}"
            userid="${userid}" password="${password}">
            <fileset dir="${cvs_build.dir}/jars">
                <include name="*.jar"/>
            </fileset>
        </ftp>

        <ftp server="hxdapa06.amfam.com"
            remotedir="${remoteEarJarDir}"
            userid="${userid}" password="${password}">
            <fileset dir="${bundle_dev.dir}">
                <include name="*.jar"/>
            </fileset>
        </ftp>

        <!-- Move the command files to the Dev server -->
        <ftp server="hxdapa06.amfam.com"
            action="del"
            remotedir="${remoteScriptDir}"
            userid="${userid}" password="${password}">
            <fileset>
                <include name="har_sync_wrapper_temp.ksh"/>
                <include name="harvest_to_cvs_sync.pl"/>
            </fileset>
        </ftp>

        <ftp server="hxdapa06.amfam.com"
            remotedir="${remoteScriptDir}"
            userid="${userid}" password="${password}">
            <fileset dir="${basedir}">
                <include name="har_sync_wrapper_temp.ksh"/>
                <include name="harvest_to_cvs_sync.pl"/>
            </fileset>
        </ftp>

        <delete file="har_sync_wrapper_temp.ksh"/>

        <!-- Run the wrapper script on Dev -->
        <telnet server="hxdapa06.amfam.com" timeout="30"
            userid="${userid}" password="${password}">
            <write>cd ${remoteScriptDir}</write>
            <read>${remoteScriptDir}</read>
            <write>chmod 774 *.ksh *.pl</write>
            <read>${remoteScriptDir}</read>
            <write>./har_sync_wrapper_temp.ksh</write>
            <!--<write>test.ksh</write> -->
            <read timeout="300">${remoteScriptDir}</read>
            <write>exit</write>
        </telnet>
    </target>

    <target name="syncHarvestUnix" depends="init" if="unixBuild" unless="doNotSyncHarvest">
        <property file="${id_file.dir}/com/amfam/ics/properties/ics_access.properties"/>
        <exec dir="${basedir}" executable="perl" resultproperty="harSync" output="syncHarvest.log">
            <arg value="${build_home.dir}/harvest_to_cvs_sync.pl"/>
            <arg value="--cvsuser=${cvs_userid}"/>
            <arg value="--cvspass=${cvs_password}"/>
            <arg value="--haruser=${userid}"/>
            <arg value="--harpass=${userid}"/>
            <arg value="--harpkg=${harvest_package}"/>
            <arg value="--harstate=${ebill.harvest_state}"/>
            <arg value="--harrepository=${harvest_repository}"/>
            <arg value="--harproject=${harvest_project}"/>
            <arg value="--jarDir=${cvs_build.dir}/jars"/>
            <arg value="--notifyaddr=${buildmaster_email_addr}"/>
            <arg value="--projectlist=${project_list}"/>
            <arg value="${cvs_tag_arg}"/>
        </exec>
    </target>

    <target name="promoteToInt" depends="init">
        <property file="${basedir}/${harvest_project}_harvest_package.properties"/>

        <!-- Promote the current package up to Int -->
        <antcall target="promotePackage">
            <param name="stage" value="local"/>
            <param name="harvest_package" value="${harvest_package}"/>
        </antcall>
        <antcall target="promotePackage">
            <param name="stage" value="dev"/>
            <param name="harvest_package" value="${harvest_package}"/>
        </antcall>

        <!-- Create the next Harvest package to cover changes starting today -->
        <tstamp>
            <format property="starting.build.date" pattern="yyyyMMdd-HHmm"/>
        </tstamp>

        <property name="next_package" value="${harvest_project}-${starting.build.date}"/>
        <antcall target="createHarvestPackage">
            <param name="harvest_package" value="${next_package}"/>
        </antcall>

        <!-- Write out the package name so that later sync processes can use it -->
        <echo file="${basedir}/${harvest_project}_harvest_package.properties" append="no">harvest_package=${next_package}${line.separator}</echo>
    </target>

    <target name="promotePackage">
        <echo message="Promoting Harvest package ${harvest_package} from the ${stage} state" level="info"/>

        <exec dir="${basedir}" executable="hpp" failonerror="false" output="promoteHarvest.log">
            <arg value="${harvest_package}"/>
            <arg line="-b hxpapa04"/>
            <arg line="-en ${harvest_project}"/>
            <arg line="-st ${stage}"/>
            <arg line="-usr ${userid}"/>
            <arg line="-pw ${userid}"/>
        </exec>
    </target>

    <target name="createHarvestPackage" if="harvest_package" description="Creates a package in Harvest">
        <echo message="Creating Harvest package ${harvest_package}" level="info"/>

        <exec dir="${basedir}" executable="hcp" failonerror="true" output="promoteHarvest.log">
            <arg value="${harvest_package}"/>
            <arg line="-b hxpapa04"/>
            <arg line="-en ${harvest_project}"/>
            <arg line="-st local"/>
            <arg line="-usr ${userid}"/>
            <arg line="-pw ${userid}"/>
        </exec>
    </target>

    <target name="deployInt" if="windowsBuild" depends="init">
        <!-- Copy the deploy script to a temporary location.  This is
            so that it can be edited then deleted.  Prevents CVS commit issues
        -->
        <copy file="hardeploy.ksh" tofile="hardeploy_temp.ksh" overwrite="true"/>
        <!-- Replace the userid token with the current user id, this will enable the
            Harvest process to run under the curertly executing user id
        -->
        <replace file="hardeploy_temp.ksh" token="@@USER_ID@@" value="${userid}"/>
        <replace file="hardeploy_temp.ksh" token="@@HARVEST_PROJECT@@" value="${harvest_project}"/>
        <replace file="hardeploy_temp.ksh" token="@@HARVEST_STATE@@" value="int"/>

        <antcall target="deployHarvestInt"/>
    </target>

    <target name="deployHarvestInt" if="windowsBuild" depends="init">
        <!-- Make sure the line endings are appropriate before we move them to Unix -->
        <fixcrlf srcdir="${basedir}" eol="lf" eof="remove"
            includes="hardeploy_temp.ksh, runHarvestUDP.ksh"/>

        <!-- Move the command files to the Dev server -->
        <ftp server="hxdapa06.amfam.com"
            remotedir="${unix.home}"
            userid="${userid}" password="${password}">
            <fileset dir="${basedir}">
                <include name="hardeploy_temp.ksh"/>
                <include name="runHarvestUDP.ksh"/>
            </fileset>
        </ftp>

        <telnet server="hxdapa06.amfam.com" timeout="30"
            userid="${userid}" password="${password}">
            <read>${unix.home}</read>
            <write>chmod 775 ./runHarvestUDP.ksh</write>
            <read>${unix.home}</read>
            <write>./runHarvestUDP.ksh hxiapa03</write>
            <read timeout="300">${unix.home}</read>
            <write>exit</write>
        </telnet>
    </target>
</project>
