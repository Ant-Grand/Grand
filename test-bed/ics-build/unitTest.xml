<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="./ant2html.xsl"?>
<project name="JUnit" default="runJUnit" basedir=".">
    <target name="init">
        <property file="${environment.properties}" />

        <property name="build_home.dir" value="${basedir}"/>
        <property file="project_versions.properties" />
        
        <property name="test.suite" value="com.amfam.ics.test.AllDomainTests"/>
    </target>

    <target name="runJUnit" unless="doNotRunJUnit" depends="init">
        <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" />

        <!-- Provide a property hook to override some of the build locations -->
        <property name="app_jar.dir" value="${cvs_build.dir}/jars"/>
        <property name="webapp_build.dir" value="${cvs_build.dir}/bin/ICSWebApp"/>
        
        <!-- Clean up prior tests -->
        <delete dir="${junit.dir}" quiet="true"/>
        <mkdir dir="${junit.dir}"/>
        
        <!-- Make sure the junit directory is there -->
        <delete dir="${junit.reports}" quiet="true"/>
        <mkdir dir="${junit.reports}" />
        <!-- Copy these property files.  This will allow the tests to 
            run without a server.  This directory contains db properties files
            that use the manual connection pooling rather then the 
            J2EE Datasource which would require that your WSAD server
            be running
        -->
        <copy todir="${junit.dir}" overwrite="true">
            <fileset dir="${cvs_source.dir}/ICSWebApp/source">
                <!-- Include the local properties files-->
                <include name="**/*.properties" />
                <include name="**/*.xml" />
            </fileset>
        </copy>
        <!-- Overlay the properties that are specific for the JUnit tests on dev -->
        <copy todir="${junit.dir}" overwrite="true">
            <fileset dir="${cvs_source.dir}/ICSConfig/unittest">
                <include name="**/*.properties" />
            </fileset>
        </copy>
        <!-- Change all the logs properties to write logs to the unit test directory -->
        <replace dir="${junit.dir}" value="${build_home.dir}" token="@@@" file="${junit.dir}/log4j.properties" />
        <replace dir="${junit.dir}" value="/" token="\" file="${junit.dir}/log4j.properties" />
        <replace dir="${junit.dir}" value="${jndi.port}" token="@port@" file="${junit.dir}/jndi.properties" />

        <junit fork="true" printsummary="on" 
            haltonerror="no" haltonfailure="no"
            errorproperty="junitFailure" failureproperty="junitFailure"
            maxmemory="768M">
            <jvmarg value="-Dcom.amfam.tier=DEV" />
            <classpath>
                <!-- Junit classes -->
                <fileset dir="${junit_jar.dir}">
                    <include name="junit.jar" />
                </fileset>
                <!-- Include all Application jars -->
                <fileset dir="${app_jar.dir}">
                    <include name="*.jar" />
                </fileset>
                <!-- Include all EJB jars -->
                <fileset dir="${bundle_dev.dir}">
                    <include name="*.jar" />
                </fileset>
                <!-- Include these folders (and not the JARs themselves) so Hibernate can find the
                     JARs for the Hibernate mappings. The JARs themselves are specified in a
                     Spring configuration for "mappingJarLocations" -->
                <pathelement location="${app_jar.dir}" />
                <pathelement location="${cvs_source.dir}/ICSWebApp/webApplication/WEB-INF/lib"/>
                
                <!-- Include any jars specifically for testing -->
                <fileset dir="${cvs_source.dir}">
                    <include name="*/lib/*.jar" />
                </fileset>
                <!-- Include the webapp classes -->
                <pathelement location="${webapp_build.dir}" />
                <!-- include all the utility jars -->
                <fileset dir="${cvs_source.dir}/ICSWebApp/webApplication/WEB-INF/lib">
                    <include name="**/*.jar" />
                </fileset>
                <!-- include the XML configurations -->
                <pathelement location="${cvs_source.dir}/ICSWebApp/webApplication/WEB-INF/configuration"/>
                
                <!-- include the resource adaptors for CICS etc. -->
                <fileset dir="${ibm_resource_adaptors.dir}">
                    <include name="**/ctg*.jar" />
                </fileset>
                <!-- The WAS runtime jars for naming services etc -->
                <fileset dir="${jndi_jar.dir}">
                    <include name="${jndi_jar}" />
                </fileset>
                <!-- DB2 driver -->
                <fileset dir="${db2driver.dir}">
                    <include name="db2java.zip" />
                </fileset>
                <!-- Oracle driver -->
                <fileset dir="${oracledriver.dir}">
                    <include name="ojdbc14.jar" />
                </fileset>
                <!-- MQ driver -->
                <fileset dir="${mq_jar.dir}">
                    <include name="*.jar" />
                </fileset>
                <!-- WAS libraries -->
                <fileset dir="${was_lib.dir}">
                    <include name="*.jar" />
                </fileset>
                <!-- access.properties -->
                <pathelement path="${id_file.dir}" />
                <!-- Include the JUnit directory to pick up the test properties -->
                <pathelement path="${junit.dir}" />
            </classpath>
            <formatter type="plain" usefile="false" />
            <formatter type="xml"/>
            <formatter classname="com.amfam.ics.build.util.TestDumpFormatter" extension=".dump"/>
            <test name="${test.suite}" todir="${junit.reports}" />
        </junit>

        <fail if="junitFailure" message="Unit tests failed"/>

    </target>

</project>