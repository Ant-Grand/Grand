<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>ggTools: Grand</title>
    <author email="grand@ggtools.net">Christophe Labouisse</author>
  </properties>

  <head>
    <!-- Copyright 2005 Christophe Labouisse -->
    <meta name="description" content="Graphical Representation of ANt Dependencies"/>
    <meta name="keywords" content="Java, tools, programming, free software, Ant, dependency, depend, target, graph, Graphviz, DOT, graphical, jface, SWT, JzGraph"/>
    <link href="css/grand.css" type="text/css" rel="stylesheet"/>
    <script type="text/javascript" src="js/grand.js"></script>
  </head>

  <body>
    <!-- This section name is intentionally left empty -->
    <section name="">
    <div class="grandmenu" id="grandMenu">
      <ul>
        <li><a href="#WhatWhy">What/Why?</a></li>
        <li><a href="#Features">Features</a></li>
        <li><a href="#News">News</a></li>
        <li><a href="#Download">Download</a></li>
        <li><a href="#Compilation">Compilation</a></li>
        <li><a href="#Using_the_Ant_task">Using the Ant task</a></li>
        <li><a href="#Filters">Filters</a></li>
        <li><a href="#Examples">Examples</a></li>
        <li><a href="#To_do">To do</a></li>
        <li><a href="#Javadoc">Javadoc</a></li>
        <li><a href="#License">License</a></li>
        <li><a href="#Contact">Contact</a></li>
        <li class="icon">
          <span>Shortcuts</span>
          <a href="javascript:grandmenuresponsive();">&#9776;</a>
        </li>
      </ul>
    </div>
    <div class="grandmodal" id="grandModal">
      <span class="grandclose" id="grandClose">&times;</span>
    </div>
    <subsection name="What/Why?">
      <p>Grand is a tool to create visual representation of <a href="https://ant.apache.org">Ant</a> target dependencies. It differs from tools like <a href="http://vizant.sourceforge.net/">Vizant</a> or <a href="https://web.archive.org/web/20050416013130/http://www.ericburke.com/downloads/antgraph/">AntGraph</a> or <a href="http://ant2dot.sourceforge.net/">ant2dot</a> by a totally different approach, relying on the Ant API rather than parsing the XML files directly. This enables Grand to provide some nifty features such as the support of the Ant 1.6+ tasks like <a href="http://ant.apache.org/manual/Tasks/import.html">import</a> or <a href="http://ant.apache.org/manual/Tasks/subant.html">subant</a>.</p>
      <p>From a user point of view, Grand can be used either as a standalone application with a nice GUI or as an Ant task generating a <a href="http://www.graphviz.org/content/dot-language">DOT language</a> file. In this latter case a post processing using <a href="http://www.graphviz.org">Graphviz</a> is required to get the actual graph.</p>
      <div class="floating-sample-image">
        <img title="Grand UI screenshot" class="modal-image" src="images/grand-ui-screenshot.svg" width="400" height="312" alt="Grand UI screenshot"/>
      </div>
      <p>On the right is a screenshot of the GUI displaying a very simple Ant file. The left pane displays a sorted list of the targets, the lower pane the source code of the last selected node and the main one the dependency graph. In this graph, the default target is pictured in a yellow octagon, the targets with a description (main targets) in limegreen boxes while ovals are targets without description. The gray target is an external target located in another file but referenced by a task (<code>subant</code> in this specific case).</p>
      <p>On the link side, the black ones are static dependencies (from the <code>depends</code> attribute) while the gray ones are the dependencies created by tasks.</p>
      <p>Images produced using the Ant task can be found in the <a href="#Examples">examples</a> section.</p>
    </subsection>
    <subsection name="Features">
      <ul>
        <li>finds both static (using the <code>depends</code> attribute) and dynamic (created by tasks like <code>ant</code> or <code>antcall</code>) dependencies,</li>
        <li>supports Ant 1.6 <code>import</code> statement,</li>
        <li>supports most dependencies generating tasks: <code>ant</code>, <code>antcall</code>, <code>subant</code> and <code>foreach</code>, <code>runtarget</code> from <a href="http://ant-contrib.sourceforge.net/">Ant-Contrib</a>,</li>
        <li>available as both as an easy to install (one single jar, no extra dependency) Ant task or a stand alone application with a nice SWT GUI,</li>
        <li>the GUI can open several files simultaneously and includes some inter file navigation features.</li>
      </ul>
    </subsection>
    <subsection name="News">
      <p>Please see the Grand and GrandUI <a href="changes-report.html#Release_History">release history</a>. Latest versions (as well as quick download links) are displayed on the <a href="../..">front page</a> if JavaScript is enabled in your browser.</p>
    </subsection>
    <subsection name="Download">
      <h4>Core/Ant task</h4>
      <p>The latest version of Grand is available as a <a href="https://github.com/Ant-Grand/Grand/releases/latest">jar file</a>. Old versions are available in the <a href="https://github.com/Ant-Grand/Grand/releases">download directory</a>.</p>
      <p>You'll also need to grab <a href="http://ant.apache.org">Ant</a>. The recommended version is 1.8.0 or later.</p>
      <h4>GUI</h4>
      <p>The GUI is available as a complete binary distribution in a <a href="https://github.com/Ant-Grand/GrandUI/releases/latest">zip file</a>. This archive should work for macOS (x86_64), Linux and Windows (both x86 and x86_64) systems. Old versions are available in the <a href="https://github.com/Ant-Grand/GrandUI/releases">download directory</a>.</p>
    </subsection>
    <subsection name="Compilation">
      <p>If you want to recompile Grand, you'll first need to install <a href="http://maven.apache.org/">Maven</a>. After that the compilation process should be straightforward: untar or unzip, <code>cd</code> to the Grand directory, and type <code>mvn package</code>. Maven will download the required libraries, compile the classes, run the (few) unit tests and create a jar.</p>
      <p>As an alternative to Maven, the source archive also provides a <code>build.xml</code> file to be used with <a href="http://ant.apache.org">Ant</a>. This file had been generated by Maven so it tries to mimic its behaviour. By default, the build will download the dependencies using Ivy. You can prevent this by running Ant with <code>-Dnoget=yes</code>. In this case you'll have to put all jars listed in the <a href="dependencies.html#Project_Dependencies">dependency report</a> in the classpath or in the <code>target/lib</code> directory.</p>
    </subsection>
    <subsection name="Using the Ant task">
      <p>To use the Ant task you should first define the <code>grand</code> task:</p>
      <source>&lt;typedef resource="net/ggtools/grand/antlib.xml" classpath="grand-0.4.jar"/&gt;</source>
      <h4>Note on property defined dependencies</h4>
      <p>Starting with release 0.4, Grand can work with dependencies defined from properties like <code>&lt;target name="target" depends="${my.target}"&gt;</code>. Keep in mind that the <em>graphed</em> file is only parsed, not executed. So no runtime defined properties (for instance, anything defined with the <code>property</code> task) will be available to Grand. The only exception is when Grand is graphing the current build file because it uses the project already loaded by Ant rather than parsing it from scratch.</p>
      <p>The task takes the following parameters:</p>
      <div class="task-parameters">
        <table>
          <tbody>
            <tr>
              <th>Attribute</th>
              <th>Definition</th>
              <th>Mandatory</th>
            </tr>
            <tr>
              <td class="param">output</td>
              <td class="def">Name of the output file.</td>
              <td class="mandatory">Yes</td>
            </tr>
            <tr>
              <td class="param">buildfile</td>
              <td class="def">Name of the build file to graph. If omitted, the current build file will be used.</td>
              <td class="mandatory">No</td>
            </tr>
            <tr>
              <td class="param">propertyfile</td>
              <td class="def">Deprecated, use <code>outputconfigfile</code> instead.</td>
              <td class="mandatory">No</td>
            </tr>
            <tr>
              <td class="param">outputconfigfile</td>
              <td class="def">Property file to configure the output. Mutually exclusive with <code>outputconfigprefix</code>.</td>
              <td class="mandatory">No</td>
            </tr>
            <tr>
              <td class="param">outputconfigprefix</td>
              <td class="def">Prefix of project properties used to configure the output. Mutually exclusive with <code>outputconfigfile</code>.</td>
              <td class="mandatory">No</td>
            </tr>
            <tr>
              <td class="param">showgraphname</td>
              <td class="def">If <code>true</code>, the generated graph will have the Ant project's <code>name</code> displayed as the graph label.</td>
              <td class="mandatory">No</td>
            </tr>
            <tr>
              <td class="param">inheritall</td>
              <td class="def">If <code>true</code>, the properties of the current build file will be passed to the <em>graphed</em> build file. The default is not to pass the properties to the <em>graphed</em> project.</td>
              <td class="mandatory">No</td>
            </tr>
          </tbody>
        </table>
      </div>
      <p>The <code>grand</code> task accepts nested <code>property</code> and <code>propertyset</code> elements. Those properties will be set in the processed project. Keep in mind that if <code>buildfile</code> is not set, those properties will be actually set in the current project.</p>
      <p>The <code>grand</code> task can also have nested <code>filter</code> elements. The filters will be applied to the graph in specified order resulting in something similar to an <em>and</em> between filters. The <code>filter</code> can take the following parameters:</p>
      <div class="task-parameters">
        <table>
          <tbody>
            <tr>
              <th>Attribute</th>
              <th>Definition</th>
              <th>Mandatory</th>
            </tr>
            <tr>
              <td class="param">name</td>
              <td class="def">Name of the filter. Can be one of <code>isolatednode</code>, <code>missingnode</code>, <code>prefixed</code>, <code>fromnode</code>, <code>tonode</code>, <code>connected</code> or <code>removenode</code>.</td>
              <td class="mandatory">Yes</td>
            </tr>
            <tr>
              <td class="param">node</td>
              <td class="def">Name of a node. Depending of the selected filter, this attribute can have different meanings and may or may not be mandatory.</td>
              <td class="mandatory">No</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div id="filters">
        <h4>Filters</h4>
        <div class="filter-definitions">
          <dl>
            <dt>Isolated node</dt>
            <dd>Removes isolated nodes (<em>i.e.</em>: nodes with no links) from the graph. The <code>node</code> attribute is not used by this filter.</dd>
            <dt>Missing node</dt>
            <dd>Removes nodes created when a link makes a reference to a non existing one. The <code>node</code> attribute is not used by this filter.</dd>
            <dt>Prefixed</dt>
            <dd>Removes nodes with prefixed names created by Ant 1.8+ for targets in build files included by <code>&lt;import /&gt;</code> statement. The <code>node</code> attribute is not used by this filter.</dd>
            <dt>From node</dt>
            <dd>Keeps only a selected node and the nodes it depends upon. The <code>node</code> parameter is the name of the node to start from.</dd>
            <dt>To node</dt>
            <dd>Keeps only a selected node and the nodes depending upon it. The <code>node</code> parameter is the name of the node to start from.</dd>
            <dt>Connected</dt>
            <dd>Keeps only a selected node and the nodes connected to it. The <code>node</code> parameter is the name of the node to start from.</dd>
            <dt>Remove node</dt>
            <dd>Removes a named node (and the attached links) from the graph.</dd>
          </dl>
        </div>
      </div>
      <div id="output-configuration">
        <h4>Output configuration</h4>
        <p>Currently, there are two ways to configure the output. One is to use a property file to override the default configuration of the DOT file writer. When overriding an attribute, the property value should be a valid Graphviz attribute set. The default configuration is:</p>
        <source># Attributes for the graph
dot.graph.attributes=rankdir="LR"

# Default Attributes for node.
dot.node.attributes=fontsize="12"

# Dependency links
dot.link.attributes=fontsize="10"

# Weak dependency links
dot.weaklink.attributes=fontsize="10",style="dotted"

# Subant links
dot.subantlink.attributes=fontsize="10",style="dashed"

# Main nodes
dot.mainnode.attributes=shape=box,fillcolor="limegreen",style="filled,bold",fontname="Times-Bold"

# Default nodes
dot.startnode.attributes=shape=octagon,fillcolor="yellow",style="filled,bold",fontname="Helvetica-Bold"

# Missing nodes
dot.missingnode.attributes=color="gray",fontcolor="gray"</source>
      </div>
      <p>Alternatively, properties configuring the output can be set up directly in the build file. The <code>grand</code> task is made aware of them by <code>outputconfigprefix</code> attribute of the task. It works similarly to Ant's <code>&lt;propertyref prefix="..."/&gt;</code>, except that prefix value is replaced by <code>dot</code>, as well. The following Ant snippet hopefully explains the concept:</p>
      <source>&lt;property name="grand.graph.attributes" value="rankdir='TB'"&gt;
&lt;grand output="build.dot" outputconfigprefix="grand"/&gt;</source>
      <p>The Graphviz attribute values can be enclosed in apostrophes (<code>&apos;</code>, as in the above) or corresponding XML entities (<code>&amp;quot;</code> or <code>&amp;apos;</code>).</p>
    </subsection>
    <subsection name="Examples">
      <source>&lt;grand output="build.dot" buildfile="ant-build.xml"/&gt;</source>
      <p>The above Ant snippet will create a DOT file named <code>build.dot</code> from <code>ant-build.xml</code>. To view the graph you need to transform the DOT file into <em>something else</em> using the <code>dot</code> command. The following Ant snippet converts the previously generated file into a PostScript file resized to fit on A4 paper in landscape mode:</p>
      <source>&lt;exec executable="dot"&gt;
    &lt;arg line="-Tps -Gsize=11.69,8.27 -Grotate=90 -o build.ps build.dot"/&gt;
&lt;/exec&gt;</source>
      <div class="sample-image">
        <img title="Ant full dependency graph" class="modal-image" width="640" height="271" src="images/ant-build.svg" alt="Ant full dependency graph"/>
      </div>
      <p>From the full graph, we use a <code>fromnode</code> filter to keep only targets that could be executed from the default <code>main</code> target:</p>
      <source>&lt;grand output="build.dot" buildfile="ant-build.xml"&gt;
    &lt;filter name="fromnode" node="main"/&gt;
&lt;/grand&gt;</source>
      <div class="sample-image">
        <img title="Ant dependencies from main target" class="modal-image" width="640" height="99" src="images/ant-build-from-main.svg" alt="Ant dependencies from main"/>
      </div>
      <p>Below is a more complex example using two filters to only keep a small part of the graph:</p>
      <source>&lt;grand output="build.dot" buildfile="ant-build.xml"&gt;
    &lt;filter name="fromnode" node="dist"/&gt;
    &lt;filter name="tonode" node="prepare"/&gt;
&lt;/grand&gt;</source>
      <div class="sample-image">
        <img title="Filtered Ant dependencies" class="modal-image" width="640" height="84" src="images/ant-build-from-dist-to-prepare.svg" alt="Filtered Ant dependencies"/>
      </div>
    </subsection>
    <subsection name="To do">
      <ul>
        <li>The current grapher configuration sucks: too close to <code>dot</code>, switch to generic parameters.</li>
        <li>Improve the processing of <code>ant</code>, <code>antcall</code>, etc.</li>
        <li>Many improvements to the GUI: open multiple files, better visualization, customization, etc.</li>
        <li>Add source visualization in the GUI.</li>
        <li>Create a <em>visual execution</em> mode in the GUI.</li>
      </ul>
    </subsection>
    <subsection name="Javadoc">
      <p>The Javadoc API documentation is available <a href="apidocs/">online</a>. The source archive includes a few JUnit tests including some Ant examples.</p>
    </subsection>
    <subsection name="License">
      <p>Grand is distributed under the terms of the <a href="../../LICENSE.txt">Simplified BSD License</a>.</p>
    </subsection>
    <subsection name="Contact">
      <p>Don't hesitate to <a href="mailto:grand@ggtools.net">contact me</a> for anything relative to Grand (bug, suggestion, etc.).</p>
    </subsection>
    </section>
  </body>

</document>
